using M4Graphs.Core.DrawableModelElements;
using M4Graphs.Core.General;
using System;
using System.Collections.Generic;

namespace M4Graphs.Core.ModelElements
{
    /// <summary>
    /// A node generated by the associated model.
    /// </summary>
    public class ModelNode : IModelElement, IEquatable<ModelNode>
    {
        /// <summary>
        /// Returns the node's identifier.
        /// </summary>
        public string Id { get; internal set; }
        /// <summary>
        /// Returns the node's text.
        /// </summary>
        public string Text { get; internal set; }

        /// <summary>
        /// Returns the node's parent node.
        /// </summary>
        public ModelNode ParentNode { get; set; }

        /// <summary>
        /// Returns all edges that end at this node.
        /// </summary>
        public List<ModelEdge> ParentEdges { get; private set; }
        /// <summary>
        /// Returns all edges that start at this node.
        /// </summary>
        public List<ModelEdge> ChildEdges { get; private set; }

        /// <summary>
        /// Returns the node's generated position.
        /// </summary>
        public GeneratedPosition Position { get; private set; } = new GeneratedPosition();

        /// <summary>
        /// Returns a value indicating whether the node has any child edges associated with it.
        /// </summary>
        public bool HasChild => ChildEdges.Count > 0;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public ModelNode()
        {
            ParentEdges = new List<ModelEdge>();
            ChildEdges = new List<ModelEdge>();
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="text"></param>
        public ModelNode(string id, string text) : this()
        {
            Id = id;
            Text = text;
        }

        /// <summary>
        /// Adds an edge that starts at this node.
        /// </summary>
        /// <param name="edge">The edge that starts at this node.</param>
        public void AddChildEdge(ModelEdge edge)
        {
            edge.SetParentNode(this);
            ChildEdges.Add(edge);
        }

        /// <summary>
        /// Adds an edge that ends at this node.
        /// </summary>
        /// <param name="edge">The edge that ends at this node.</param>
        public void AddParentEdge(ModelEdge edge)
        {
            ParentEdges.Add(edge);
        }

        /// <summary>
        /// Sets this node's parent node.
        /// </summary>
        /// <param name="node"></param>
        public void SetParentNode(ModelNode node)
        {
            ParentNode = node;
        }

        /// <summary>
        /// Sets the node's generated position.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        public void SetPosition(int x, int y)
        {
            Position.Update(x, y);
        }

        /// <summary>
        /// Returns a string that represents the current edge.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return $"Node ({Id}): {Text}";
        }


        /// <summary>
        /// Converts the <see cref="ModelNode"/> to a new <see cref="DrawableNode"/>.
        /// </summary>
        /// <param name="xDistance"></param>
        /// <param name="yDistance"></param>
        /// <returns></returns>
        public IDrawableNode ToGeneratedDrawable(int xDistance, int yDistance)
        {
            return new DrawableNode(Id, Text, Position.X * xDistance, Position.Y * yDistance);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as ModelNode);
        }

        public virtual bool Equals(ModelNode other)
        {
            return other != null &&
                   Id == other.Id &&
                   Text == other.Text &&
                   EqualityComparer<ModelNode>.Default.Equals(ParentNode, other.ParentNode) &&
                   EqualityComparer<List<ModelEdge>>.Default.Equals(ParentEdges, other.ParentEdges) &&
                   EqualityComparer<List<ModelEdge>>.Default.Equals(ChildEdges, other.ChildEdges) &&
                   EqualityComparer<GeneratedPosition>.Default.Equals(Position, other.Position) &&
                   HasChild == other.HasChild;
        }

        public override int GetHashCode()
        {
            var hashCode = 1086983834;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Id);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Text);
            hashCode = hashCode * -1521134295 + EqualityComparer<ModelNode>.Default.GetHashCode(ParentNode);
            hashCode = hashCode * -1521134295 + EqualityComparer<List<ModelEdge>>.Default.GetHashCode(ParentEdges);
            hashCode = hashCode * -1521134295 + EqualityComparer<List<ModelEdge>>.Default.GetHashCode(ChildEdges);
            hashCode = hashCode * -1521134295 + EqualityComparer<GeneratedPosition>.Default.GetHashCode(Position);
            hashCode = hashCode * -1521134295 + HasChild.GetHashCode();
            return hashCode;
        }

        public static bool operator ==(ModelNode node1, ModelNode node2)
        {
            return EqualityComparer<ModelNode>.Default.Equals(node1, node2);
        }

        public static bool operator !=(ModelNode node1, ModelNode node2)
        {
            return !(node1 == node2);
        }
    }
}
