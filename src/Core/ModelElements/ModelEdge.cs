using M4Graphs.Core.DrawableModelElements;
using M4Graphs.Core.General;

namespace M4Graphs.Core.ModelElements
{
    /// <summary>
    /// An edge generated by the associated <see cref="Model"/>.
    /// </summary>
    public class ModelEdge : IModelElement
    {
        /// <summary>
        /// Returns the edge's identifier.
        /// </summary>
        public string Id { get; internal set; }
        /// <summary>
        /// Returns the edge's text.
        /// </summary>
        public string Text { get; internal set; }

        /// <summary>
        /// Returns the parent <see cref="ModelNode"/>.
        /// </summary>
        public ModelNode SourceNode { get; private set; }
        /// <summary>
        /// Returns the child <see cref="ModelNode"/>.
        /// </summary>
        public ModelNode TargetNode { get; private set; }

        /// <summary>
        /// Returns the edge's generated position.
        /// </summary>
        public GeneratedPosition Position { get; private set; } = new GeneratedPosition();
        /// <summary>
        /// Returns the edge's source node's generated position.
        /// </summary>
        public GeneratedPosition SourceNodePositon { get; private set; } = new GeneratedPosition();
        /// <summary>
        /// Returns the edge's target node's generated position.
        /// </summary>
        public GeneratedPosition TargetNodePosition { get; private set; } = new GeneratedPosition();
        /// <summary>
        /// Returns a value indicating whether the edge has a target node associated with it.
        /// </summary>
        public bool HasChild => TargetNode != null;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public ModelEdge()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="text"></param>
        public ModelEdge(string id, string text)
        {
            Id = id;
            Text = text;
        }

        /// <summary>
        /// Sets the edge's target <see cref="ModelNode"/>.
        /// </summary>
        /// <param name="end"></param>
        public void SetTargetNode(ModelNode end)
        {
            end.AddParentEdge(this);
            TargetNode = end;
            TargetNodePosition = end.Position;
        }

        /// <summary>
        /// Sets the edge's source <see cref="ModelNode"/>
        /// </summary>
        /// <param name="start"></param>
        public void SetParentNode(ModelNode start)
        {
            SourceNode = start;
            SourceNodePositon = start.Position;
        }

        /// <summary>
        /// Sets the edge's generated position.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        public void SetPosition(int x, int y)
        {
            Position.X = x;
            Position.Y = y;
        }

        /// <summary>
        /// Returns a string that represents the current edge.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return $"Edge ({Id}): {Text}";
        }

        /// <summary>
        /// Converts the <see cref="ModelEdge"/> to a new <see cref="DrawableEdge"/>.
        /// </summary>
        /// <param name="xDistance"></param>
        /// <param name="yDistance"></param>
        /// <returns></returns>
        public IDrawableEdge ToGeneratedDrawable(int xDistance, int yDistance)
        {
            if (SourceNode == null && TargetNode == null)
                throw new EdgeNotConnectedException($"edge with id '{Id}' and text '{Text}' is not connected to anything.");
            if (SourceNode == null)
            {
                var drawable = new DrawableEdge(Id, Text, Position.X,0);
                drawable.SetTargetNode(TargetNode.ToGeneratedDrawable(xDistance, yDistance));
                return drawable;
            }
            else if (TargetNode == null)
            {
                var drawable = new DrawableEdge(Id, Text, Position.X,0);
                drawable.SetSourceNode(SourceNode.ToGeneratedDrawable(xDistance, yDistance));
                return drawable;
            }
            else
            {
                return new DrawableEdge(Id, Text, Position.X, Position.Y, SourceNode.ToGeneratedDrawable(xDistance, yDistance), TargetNode.ToGeneratedDrawable(xDistance, yDistance));
            }
        }
    }
}
