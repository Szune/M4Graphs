using M4Graphs.Core.Geometry;

namespace M4Graphs.Core.Elements
{
    /// <summary>
    /// An edge generated by the associated model.
    /// </summary>
    public class DefaultEdgeElement : IEdgeElement
    {
        /// <summary>
        /// Returns the edge's identifier.
        /// </summary>
        public string Id { get; internal set; }
        /// <summary>
        /// Returns the edge's text.
        /// </summary>
        public string Text { get; internal set; }

        /// <summary>
        /// Returns the parent <see cref="DefaultNodeElement"/>.
        /// </summary>
        public DefaultNodeElement SourceNode { get; private set; }
        /// <summary>
        /// Returns the child <see cref="DefaultNodeElement"/>.
        /// </summary>
        public DefaultNodeElement TargetNode { get; private set; }

        /// <summary>
        /// Returns the edge's position.
        /// </summary>
        public Coordinate Position { get; }

        /// <summary>
        /// Returns a value indicating whether the edge has a target node associated with it.
        /// </summary>
        public bool HasChild => TargetNode != null;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public DefaultEdgeElement()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="text"></param>
        public DefaultEdgeElement(string id, string text)
        {
            Id = id;
            Text = text;
        }

        /// <summary>
        /// Sets the edge's target <see cref="DefaultNodeElement"/>.
        /// </summary>
        /// <param name="end"></param>
        public void SetTargetNode(DefaultNodeElement end)
        {
            end.AddParentEdge(this);
            TargetNode = end;
        }

        /// <summary>
        /// Sets the edge's source <see cref="DefaultNodeElement"/>
        /// </summary>
        /// <param name="start"></param>
        public void SetParentNode(DefaultNodeElement start)
        {
            SourceNode = start;
        }

        /// <summary>
        /// Returns a string that represents the current edge.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return $"Edge ({Id}): {Text}";
        }
    }
}
